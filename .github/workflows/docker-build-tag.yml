name: Publish Docker image

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  build_multi_platform_images:
    name: Build and push Docker image to Docker Hub
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: 'arm64'
            path: arm64v8/nginx:alpine
          - name: 'amd64'
            path: nginx:alpine
    steps:
      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1
        with:
          strip_v: true

      - name: Check out GitHub repo
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            image=moby/buildkit:v0.10.6

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build image and push to Docker Hub
        uses: docker/build-push-action@v3
        with:
          push: true
          build-args: |
            TARGET=${{ matrix.path }}
            REACT_APP_GOOGLE_ANALYTICS_ID=${{ secrets.REACT_APP_GOOGLE_ANALYTICS_ID }}
            REACT_APP_SEGMENT_WRITE_KEY=${{ secrets.REACT_APP_SEGMENT_WRITE_KEY }}
          tags: ${{ github.repository }}:${{steps.tag.outputs.tag}}-${{ matrix.name }}
          cache-from: type=gha,scope=${{ matrix.name }}
          cache-to: type=gha,mode=max,scope=${{ matrix.name }}

  create_manifest:
    needs: build_multi_platform_images
    runs-on: ubuntu-latest
    steps:
      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1
        with:
          strip_v: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create Docker manifest and push multi-arch image to Registry
        run: |
          docker manifest create ${{ github.repository }}:${{steps.tag.outputs.tag}} --amend ${{ github.repository }}:${{steps.tag.outputs.tag}}-arm64 --amend ${{ github.repository }}:${{steps.tag.outputs.tag}}-amd64
          docker manifest push -p ${{ github.repository }}:${{steps.tag.outputs.tag}}

          docker manifest create ${{ github.repository }}:latest --amend ${{ github.repository }}:${{steps.tag.outputs.tag}}-arm64 --amend ${{ github.repository }}:${{steps.tag.outputs.tag}}-amd64
          docker manifest push -p ${{ github.repository }}:latest

  releasing_helm_chart_dashboard:
    needs: create_manifest
    runs-on: ubuntu-latest
    steps:
      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1
        with:
          strip_v: false

      - name: Editing helm-release repo with version based on a Tag pushed.
        run: |
          # Setting up Git:
          git clone https://kubeshop-bot:$GH_PUSH_TOKEN@github.com/kubeshop/helm-charts
          cd ./helm-charts
          git config user.name "kubeshop-bot"
          git config user.email "kubeshop-bot@kubeshop.io"

          export GH_PUSH_TOKEN
          export RELEASE_VERSION
          export SERVICE

          # Check if release branch exists in helm-charts repository
          REPO_OWNER=kubeshop
          REPO_NAME=helm-charts
          RELEASE_BRANCH_NAME=release/$SERVICE/$RELEASE_VERSION
          echo $RELEASE_VERSION
          STATUS=$(curl -s -o /dev/null -w '%{http_code}' -H "${AUTH_HEADER}" "https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/branches/${RELEASE_BRANCH_NAME}")

          if [ "${STATUS}" -eq 404 ]; then
            git fetch origin main
            git checkout main
            cd ./scripts
            ./chart_releaser.sh --helm-chart-folder testkube-$SERVICE
          else
            git fetch origin "release/$SERVICE/$RELEASE_VERSION"
            git checkout "release/$SERVICE/$RELEASE_VERSION"
            echo "Switched to release branch"
            cd ./scripts
            ./chart_releaser.sh --helm-chart-folder testkube-$SERVICE --branch true
          fi

        env:
          SERVICE: dashboard
          GH_PUSH_TOKEN: ${{ secrets.CI_BOT_TOKEN }}
          RELEASE_VERSION: ${{ steps.tag.outputs.tag }}
